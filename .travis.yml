language: scala
sudo: true
dist: trusty
scala:
  - "2.11.12"
  - "2.13.0-M5"
  - "2.12.8"


before_install:
  # make comparing to origin/master work
  - git remote set-branches --add origin master && git fetch
  # fetch full history for correct current and previous version detection
  - git fetch --unshallow
  - git branch -f "$TRAVIS_BRANCH" && git checkout "$TRAVIS_BRANCH"
  # using jabba for custom jdk management
  - curl -sL https://raw.githubusercontent.com/shyiko/jabba/0.11.1/install.sh | bash && . ~/.jabba/jabba.sh
  - jabba install adopt@1.8.192-12
  - jabba install adopt@1.11.0-1

before_script:
  - unset _JAVA_OPTIONS

sbt_args: -d -J-XX:ReservedCodeCacheSize=128m

jobs:
  include:
    - stage: test
      name: "Test Java 8"
      script:
        - jabba use ${JDK:=adopt@1.8.192-12}
        - java -version
        - sbt -jvm-opts .jvmopts-travis test
        -
    - stage: test
      name: "Test Java 11"
      script:
        - jabba use ${JDK:=adopt@1.11.0-1}
        - sbt -jvm-opts .jvmopts-travis test

    - stage: whitesource
      name: "White source"
      script:
        # check policies, if on master and secure env vars are available
        - if [[ "$TRAVIS_SECURE_ENV_VARS" == "true" ]]; then if [[ "$TRAVIS_BRANCH" == "master" && "$TRAVIS_EVENT_TYPE" == "push" ]]; then sbt 'set credentials += Credentials("whitesource", "whitesourcesoftware.com", "", System.getenv("WHITESOURCE_KEY"))' whitesourceCheckPolicies whitesourceUpdate; else sbt 'set credentials += Credentials("whitesource", "whitesourcesoftware.com", "", System.getenv("WHITESOURCE_KEY"))' whitesourceCheckPolicies; fi ; fi

stages:
  - name: check
    if: NOT tag =~ ^v
  - name: test
    if: NOT tag =~ ^v
  - name: whitesource
    if: repo = akka/akka-management AND ( ( branch = master AND type = push ) OR tag =~ ^v )

cache:
  directories:
    - $HOME/.ivy2/cache
    - $HOME/.sbt/boot
    - $HOME/.jabba/jdk

env:
  global:
    # encrypt with: travis encrypt WHITESOURCE_KEY=...
    - secure: "tQ7+MgNNH5Y8wE8w6KTlbSHe3jtgQ4yc1SVaty7KK7ImZLEjLC5yO9PvXMUst/+5E4G2DsAuZdG8LInD3L7Y5tNNPer9NFOTJnzhAZf8R1YeuvX76ofMf31oyfqR8IPJPxOBkBAmMiz/Xioa+oqmsdbXlVP6OUsic7jegMPqjamy/ZAJ8/8MCn6g9AQNqajg8z27aOPXO96wLEEMR82FXffARIDlwbrtxBpEq1g9HywTIwLP9+BgLaQ+TBz+ND1WYVByqnKWwQYYFnWDo8xTZmDVxHirml1mLevR7PUbMg55FFxAo4H9K64d4RQJF6FsZhRFpMihTwdsut1BQQJ9lTML133q5ID+XX3L5yr+1GqAgnHh9Qt/Fdt4pG1iRymBR++RBZiBxANpoE23xy5QVySQ4BYlO0s37rhw0SiFlvuSXmKyTB6j52r/71ocCFbZcUDgjKQ8Q0tokzsBvSTuDwV8yh4nw4ec3/zNp03ByeuOwzJ1S7st+vnAF65Ed7v+kcLHzWLZ+ocnXWtt4+47pZm4YdPMukpCQYxNdWrHap9ughtVxOchNbP3QchOx2TA1mVo4S1pI+gNfpjEap8uhyRLTirI0g1weEBWvndKtwHQrauYyW2awOeU/IGZCPPAY71gmvy9O+JZmBOz517zia4YH2wUctI4t/p0j2MDwo8="
